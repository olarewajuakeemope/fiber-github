import { takeEvery, all, fork, call, put, select } from 'redux-saga/effects'
import { push, goBack } from 'react-router-redux'
import { LOCATION_CHANGE } from 'react-router-redux'
import { matchAiParams } from 'redux/history'
import { searchUsers } from 'api'
import { getUsers } from './selectors'
import t from './types'

function* apiUsersSearchSaga(query) {
  try {
    const items = yield call(searchUsers, query)
    yield put({ type: t.SEARCH_REQUEST_SUCCESS, items })
  } catch (error) {
    yield put({ type: t.SEARCH_REQUEST_ERROR, error })
  }
}

function* searchUsersSaga({ query }) {
  yield put(push('/users'))
  yield fork(apiUsersSearchSaga, query)
}

function* profileRouteSaga() {
  const { user } = matchAiParams()
  const users = yield select(getUsers)
  if (user) {
    if (users.length === 0) {
      const query = { q: user }
      yield fork(apiUsersSearchSaga, query)
    }
  }
}

function* backRouteRequestSaga() {
  yield put(goBack())
}

function* watchSearchUsersSaga() {
  yield takeEvery(t.SEARCH_REQUEST, searchUsersSaga)
}

function* watchBackRouteRequestSaga() {
  yield takeEvery(t.PREVIOUS_ROUTE_REQUEST, backRouteRequestSaga)
}

function* watchProfileRouteSaga() {
  yield takeEvery(LOCATION_CHANGE, profileRouteSaga)
}

export default function* () {
  yield all([
    fork(watchSearchUsersSaga),
    fork(watchBackRouteRequestSaga),
    fork(watchProfileRouteSaga),
  ])
}
