import { getRepos, getStarred, getFollowers, getFollowing } from 'api'
import { takeEvery, all, fork, put, call } from 'redux-saga/effects'
import { LOCATION_CHANGE } from 'react-router-redux'
import { matchAiParams } from 'redux/history'
import t from './types'

function* getReposSaga(user) {
  yield put({ type: t.GET_REPOS_REQUEST })
  try {
    const repos = yield call(getRepos, user)
    yield put({ type: t.GET_REPOS_SUCCESS, repos })
  } catch (error) {
    yield put({ type: t.GET_REPOS_ERROR, error })
  }
}

function* getFollowingSaga(user) {
  yield put({ type: t.GET_FOLLOWING_REQUEST })
  try {
    const following = yield call(getFollowing, user)
    yield put({ type: t.GET_FOLLOWING_SUCCESS, following })
  } catch (error) {
    yield put({ type: t.GET_FOLLOWING_ERROR, error })
  }
}

function* getFollowersSaga(user) {
  yield put({ type: t.GET_FOLLOWERS_REQUEST })
  try {
    const followers = yield call(getFollowers, user)
    yield put({ type: t.GET_FOLLOWERS_SUCCESS, followers })
  } catch (error) {
    yield put({ type: t.GET_FOLLOWERS_ERROR, error })
  }
}

function* getStarredSaga(user) {
  yield put({ type: t.GET_STARS_REQUEST })
  try {
    const stars = yield call(getStarred, user)
    yield put({ type: t.GET_STARS_SUCCESS, stars })
  } catch (error) {
    yield put({ type: t.GET_STARS_ERROR, error })
  }
}

function* profileRouteSaga() {
  const { user } = matchAiParams()
  if (user) {
    yield put({ type: t.SET_CURRENT_USER, user })
    yield fork(getReposSaga, user)
    yield fork(getFollowersSaga, user)
    yield fork(getFollowingSaga, user)
    yield fork(getStarredSaga, user)
  }
}

function* watchProfileRouteSaga() {
  yield takeEvery(LOCATION_CHANGE, profileRouteSaga)
}

export default function* () {
  yield all([
    fork(watchProfileRouteSaga),
  ])
}
