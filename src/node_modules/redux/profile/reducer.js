import t from './types'

const ACTION_HANDLERS = {
  [t.SET_CURRENT_USER]: (state, { user }) => ({
    ...state,
    user,
  }),
  [t.GET_REPOS_REQUEST]: state => ({
    ...state,
    loaders: {
      ...state.loaders,
      repos: true,
    },
  }),
  [t.GET_REPOS_SUCCESS]: (state, { repos: { data } }) => ({
    ...state,
    repos: data,
    loaders: {
      ...state.loaders,
      repos: false,
    },
  }),
  [t.GET_REPOS_ERROR]: (state, { error }) => ({
    ...state,
    error,
    loaders: {
      ...state.loaders,
      repos: false,
    },
  }),
  [t.GET_FOLLOWERS_REQUEST]: state => ({
    ...state,
    loaders: {
      ...state.loaders,
      followers: true,
    },
  }),
  [t.GET_FOLLOWERS_SUCCESS]: (state, { followers: { data } }) => ({
    ...state,
    followers: data,
    loaders: {
      ...state.loaders,
      followers: false,
    },
  }),
  [t.GET_FOLLOWERS_ERROR]: (state, { error }) => ({
    ...state,
    error,
    loaders: {
      ...state.loaders,
      followers: false,
    },
  }),
  [t.GET_FOLLOWING_REQUEST]: state => ({
    ...state,
    loaders: {
      ...state.loaders,
      following: true,
    },
  }),
  [t.GET_FOLLOWING_SUCCESS]: (state, { following: { data } }) => ({
    ...state,
    following: data,
    loaders: {
      ...state.loaders,
      following: false,
    },
  }),
  [t.GET_FOLLOWING_ERROR]: (state, { error }) => ({
    ...state,
    error,
    loaders: {
      ...state.loaders,
      following: false,
    },
  }),
  [t.GET_STARS_REQUEST]: state => ({
    ...state,
    loaders: {
      ...state.loaders,
      stars: true,
    },
  }),
  [t.GET_STARS_SUCCESS]: (state, { stars: { data } }) => ({
    ...state,
    stars: data,
    loaders: {
      ...state.loaders,
      stars: false,
    },
  }),
  [t.GET_STARS_ERROR]: (state, { error }) => ({
    ...state,
    error,
    loaders: {
      ...state.loaders,
      stars: false,
    },
  }),
}

const initialState = {
  repos: [],
  followers: [],
  following: [],
  stars: [],
  user: '',
  error: '',
  loaders: {
    repos: false,
    followers: false,
    following: false,
    stars: false,
  }
}

export default function reducer(state = initialState, action) {
  const handler = ACTION_HANDLERS[action.type]
  return handler ? handler(state, action) : state
}
