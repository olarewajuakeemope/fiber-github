import React, { Fragment, PureComponent } from 'react'
import { List } from 'react-virtualized'
import PropTypes from 'prop-types'
import lodash from 'lodash'
import { v1 } from 'uuid'
import { getDimension, getScrollParent } from 'utils'
import './style.css'

/* eslint-disable jsx-a11y/heading-has-content */
const renderLoaderEl = () => (
  <div key={v1()} className="panel_item loading">
    <h5 className="loading__background profile__message" />
    <h5 className="loading__background profile__url" />
    <h5 className="loading__background profile__author" />
    <h5 className="loading__background profile__date" />
  </div>
)

const initialState = {
  width: getDimension('width', 200, 200),
  rowHeight: getDimension('height', 200, 200),
  filters: {
    repos: '',
    followers: '',
    following: '',
    stars: '',
  },
  loaders: {
    repos: true,
    followers: true,
    following: true,
    stars: true,
  },
  placeholders: {
    repos: 'Filter repo names',
    followers: 'Filter followers usernames',
    following: 'Filter following github usernames',
    stars: 'Filter starred repo names',
  },
}

class Panel extends PureComponent {
  state = initialState
  filterInput = null

  static getDerivedStateFromProps({ isLoadingRepos, isLoadingFollowers, isLoadingFollowing, isLoadingStars }) {
    return {
      loaders: {
        repos: isLoadingRepos,
        followers: isLoadingFollowers,
        following: isLoadingFollowing,
        stars: isLoadingStars,
      },
    }
  }

  componentDidMount() {
    window.addEventListener('resize', this.resizeDimensions)
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.resizeDimensions)
  }

  componentDidUpdate({ activeTab }) {
    if (activeTab !== this.props.activeTab) {
      const listWrapper = document.querySelector('.ReactVirtualized__Grid__innerScrollContainer')
      if (listWrapper) {
        getScrollParent(listWrapper).scrollTop = 0
      }
      if (this.filterInput) {
        this.filterInput.focus()
      }
      this.setState({
        filters: {...initialState.filters}
      })
    }
  }
  
  makeInputFilterRef = input => this.filterInput = input

  resizeDimensions = () => {
    this.setState({
      width: getDimension('width', 200, 200),
      rowHeight: getDimension('height', 200, 200),
    })
  }

  renderLoaders = () => {
    let i = 5
    const loaders = []
    while (i > 0) {
      loaders.push(renderLoaderEl())
      i -= 1
    }
    return loaders
  }

  handleChange = e => {
    const { name, value } = e.target
    this.setState({
      filters: {
        [name]: value
      }
    })
  }

  processFilter = (filter, tab, tabArray) => {
    const pattern = new RegExp(lodash.escapeRegExp(filter), 'i')
    let isMatch
    if (tab === 'repos' || tab === 'stars') {
      isMatch = (result => pattern.test(result.name))
    } else {
      isMatch = (result => pattern.test(result.login))
    }
    return lodash.filter(tabArray, isMatch)
  }

  renderData = tab => {
    const { filters, width, rowHeight, placeholders } = this.state
    const tabArray = this.props[tab]
    const filter = filters[tab]
    const filteredTabArray = this.processFilter(filter, tab, tabArray)
    let rowRenderer
  
    const renderRepos = ({ index, key, style }) => {
      const { name, html_url, created_at, description } = filteredTabArray[index]
      return (
        <div key={key} style={style} className="panel_item">
          <h5 className="profile__message">{name} <a href={html_url} target="_blank">github url</a></h5>
          <h5 className="profile__description">{description}</h5>
          <h5 className="profile__date">{(new Date(created_at).toString())}</h5>
      </div>
      )
    }

    const renderUsers = ({ index, key, style }) => {
      const { login, html_url, avatar_url } = filteredTabArray[index]
      return (
        <div key={key} style={style} className="panel_item">
          <div className="meta-wrapper">
            <img src={avatar_url} alt="user avatar" className="avatar" />
            <div className="text">
              <h5 className="profile__author">{login}</h5>
              <a href={html_url} target="_blank">github url</a>
            </div>
          </div>
      </div>
      )
    }

    if (tab === 'repos' || tab === 'stars') {
      rowRenderer = renderRepos
    } else {
      rowRenderer = renderUsers
    }

    return (
      <Fragment>
        <input
          name={tab}
          type="text"
          value={filter}
          ref={this.makeInputFilterRef}
          onChange={this.handleChange}
          placeholder={placeholders[tab]}
          className="panelInput__filter"
        />
        <List
          width={width}
          rowHeight={rowHeight}
          style={{ outline: 0 }}
          rowCount={filteredTabArray.length}
          rowRenderer={rowRenderer}
          height={rowHeight * Math.min(20, filteredTabArray.length)}
        />
      </Fragment>
    )
  }

  render() {
    const { activeTab } = this.props
    const { loaders } = this.state
    return (
      <div className="userProfile__panel">
        <div className="userProfilePanelItems__wrapper">
          {loaders[activeTab] ? this.renderLoaders() : this.renderData(activeTab)}
        </div>
      </div>
    )
  }
}

Panel.propTypes = {
  activeTab: PropTypes.string,
  repos: PropTypes.array,
  followers: PropTypes.array,
  following: PropTypes.array,
  stars: PropTypes.array,
  isLoadingRepos: PropTypes.bool,
  isLoadingFollowers: PropTypes.bool,
  isLoadingFollowing: PropTypes.bool,
  isLoadingStars: PropTypes.bool,
}

export default Panel
