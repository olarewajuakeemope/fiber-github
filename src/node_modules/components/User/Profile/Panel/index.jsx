import React, { PureComponent } from 'react'
import { List } from 'react-virtualized'
import PropTypes from 'prop-types'
// import lodash from 'lodash'
import { v1 } from 'uuid'
import { getDimension, getScrollParent } from 'utils'
import './style.css'

/* eslint-disable jsx-a11y/heading-has-content */
const renderLoaderEl = () => (
  <div key={v1()} className="panel_item loading">
    <h5 className="loading__background profile__message" />
    <h5 className="loading__background profile__url" />
    <h5 className="loading__background profile__author" />
    <h5 className="loading__background profile__date" />
  </div>
)
/* eslint-disable jsx-a11y/heading-has-content */

class Panel extends PureComponent {
  state = {
    width: getDimension('width', 200, 200),
    rowHeight: getDimension('height', 200, 200),
    loaders: {
      repos: true,
      followers: true,
      following: true,
      stars: true,
    },
  }

  static getDerivedStateFromProps({ isLoadingRepos, isLoadingFollowers, isLoadingFollowing, isLoadingStars }) {
    return {
      loaders: {
        repos: isLoadingRepos,
        followers: isLoadingFollowers,
        following: isLoadingFollowing,
        stars: isLoadingStars,
      },
    }
  }

  componentDidMount() {
    window.addEventListener('resize', this.resizeDimensions)
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.resizeDimensions)
  }

  componentDidUpdate() {
    const listWrapper = document.querySelector('.panel_item')
    if (listWrapper) {
      getScrollParent(listWrapper).scrollTop = 0
    }
  }

  resizeDimensions = () => {
    this.setState({
      width: getDimension('width', 200, 200),
      rowHeight: getDimension('height', 200, 200),
    })
  }

  renderLoaders = () => {
    let i = 5
    const loaders = []
    while (i > 0) {
      loaders.push(renderLoaderEl())
      i -= 1
    }
    return loaders
  }

  renderData = tab => {
    const { width, rowHeight } = this.state
    const tabArray = this.props[tab]
    let rowRenderer
  
    const renderRepos = ({ index, key, style }) => {
      const { name, html_url, created_at, description } = tabArray[index]
      return (
        <div key={key} style={style} className="panel_item">
          <h5 className="profile__message">{name} <a href={html_url} target="_blank">github url</a></h5>
          <h5 className="profile__description">{description}</h5>
          <h5 className="profile__date">{(new Date(created_at).toString())}</h5>
      </div>
      )
    }

    const renderUsers = ({ index, key, style }) => {
      const { login, html_url, avatar_url } = tabArray[index]
      return (
        <div key={key} style={style} className="panel_item">
          <div className="meta-wrapper">
            <img src={avatar_url} alt="user avatar" className="avatar" />
            <div className="text">
              <h5 className="profile__author">{login}</h5>
              <a href={html_url} target="_blank">github url</a>
            </div>
          </div>
      </div>
      )
    }

    if (tab === 'repos' || tab === 'stars') {
      rowRenderer = renderRepos
    } else {
      rowRenderer = renderUsers
    }

    return (
      <List
        width={width}
        rowHeight={rowHeight}
        style={{ outline: 0 }}
        rowCount={tabArray.length}
        rowRenderer={rowRenderer}
        height={rowHeight * Math.min(20, tabArray.length)}
      />
    )
  }

  render() {
    const { activeTab } = this.props
    const { loaders } = this.state
    return (
      <div className="userProfile__panel">
        <div className="userProfilePanelItems__wrapper">
          {loaders[activeTab] ? this.renderLoaders() : this.renderData(activeTab)}
        </div>
      </div>
    )
  }
}

Panel.propTypes = {
  activeTab: PropTypes.string,
  repos: PropTypes.array,
  followers: PropTypes.array,
  following: PropTypes.array,
  stars: PropTypes.array,
  isLoadingRepos: PropTypes.bool,
  isLoadingFollowers: PropTypes.bool,
  isLoadingFollowing: PropTypes.bool,
  isLoadingStars: PropTypes.bool,
}

export default Panel
